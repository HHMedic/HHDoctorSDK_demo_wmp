//const hhim = require('./utils/HH_WMP_SDK.js');
const eventOption = {};
const dateUtil = require('./utils/dateUtil.js');
const commonUtil = require('./utils/commonUtil.js');
const log = require('./utils/logUtil.js');
const ring = wx.createInnerAudioContext();
var that = this;
var livePlayUrl;
var playStart = false,
  pushStart = false;
var onLoading = true;
var code1101 = 0,
  code1308 = 0;
var secondes = 0;
var pageIsShowing = true;
var famOrderId = '';
var attached = false;
var callStatus = {
  openCamera: false,
  playVideo: false,
  preCallStart: -1,
  preCallFinish: -1
};
var timeOutHandler = {
  weaknetwork: null
};
var disConnected = false;
var showModal = false;

Component({
  behaviors: [require('./hhBehaviors.js')],
  /**
   * 组件的属性列表
   */
  properties: {},

  /**
   * 组件的初始数据
   */
  data: {
    _name: 'hh-call',
    callImmediate: false,
    status: 0, //状态码。1:接入中，显示logo，2:显示视频画面，3:拍照，4:专家侧呼叫用户，5:用户侧专家呼叫
    pushUrl: '', //本地视频推流地址
    playUrl: '', //播放地址
    pusher: null, //推流对象
    player: null, //播放对象
    photoUrl: '', //照片url
    license: '',
    name: '', //姓名
    videoTime: '', //已视频时长
    videoTimeStart: null, //开始时间
    timeout: 60, //当前超时倒计时
    enableCamera: true, //是否启用本地推流摄像头
    showExtControls: false, //是否显示扩展按纽
    extControlHeight: 35, //扩展信息栏高度
    extControlImgSrc: 'https://imgs.hh-medic.com/icon/wmp/up.png', //图片地址
    pusherVisible: 'hidden', //是否显示本地推流画面
    playerVisible: 'hidden', //是否显示本地推流画面
    t301: null, //振铃计时器
    t301Timeout: 60, //振铃时长
    demo: 0,
    playMode: "HD",
    uiStyle: {
      objFit: 'fillCrop',
      muted: false,
      waittingText: '',
      extBtns: true,
      license: '执业资格证'
    },
    animationData: {},
    showDemoTip: false,
    callBtnsVisible: false,
    playerFullscreen: false,
    logoWidth: 235,
    pusherHeight: 167,
    pusherWidth: 120,
    pusherTop: 5,
    expertTop: 30,
    isBackCamera: false,
    flashIcon: 'https://imgs.hh-medic.com/icon/wmp/flash-off.png',
    showSettingBtn: false,
    showCancelBtn: false,
    showCalledPanel: false,
    question: null,
    feedbackVisible: 'hidden',
    showLaunchBtn: false,
    showAcceptBtn: false,
    expertCalling: false,
    uploadedImages: [],
    addressStatus: 0,
    editStatus: 1,
    address: {},
    chooseAddress: {},
    locCity: '',
    curCity: '北京',
    animationSearch: null,
    animationCity: null,
  },

  lifetimes: {
    attached() {
      that = this;
      var pusher = wx.createLivePusherContext(this);
      that.setData({
        pusher: pusher
      });
      var player = wx.createLivePlayerContext('livePlayer', this);
      that.setData({
        player: player
      });

      if (2 == that.data.status) {
        that._startVideo();
        that._showPlayer();
        that._showPusher();
      }

      ring.autoplay = false;
      ring.loop = true;
      ring.volume = 1;
      ring.src = 'https://imgs.hh-medic.com/icon/ring.mp3';
      // wx.setInnerAudioOption({
      //   mixWithOther: true,
      //   obeyMuteSwitch: false
      // })
      attached = true;
      onLoading = true;

      that._weakNetworkMonitor();
      var info = wx.getSystemInfoSync();
      this.setData({
        sysInfo: info
      })
    },
    ready() {
      wx.setNavigationBarColor({
        backgroundColor: '#ffffff',
        frontColor: '#000000'
      })
    },
    detached() {
      pageIsShowing = false;
      ring.stop();
      if (getApp().globalData._hhim) {
        that._logInfo('页面返回挂机，当前状态码：' + that.data.status);
        switch (parseInt(that.data.status)) {
          case 0:
            //if (callStatus.preCallStart > 0 && callStatus.preCallFinish < 0) {
            if (callStatus.preCallStart > 0) {
              setTimeout(function() {
                ring.stop();
                that._hangup({
                  hangupType: 'CANCEl',
                  stayInpage: true,
                  source: 'lifetimes.detached,status:0'
                })
              }, 500)
            }
            break;
          case 2: //通话中
          case 3: //呼叫过程中选择图片
            that._hangup({
              stayInpage: true,
              source: 'lifetimes.detached,status:2,3'
            })
            break;
          case 1: //呼叫中
          case 4: //专家回拨专家等待界面
          case 5: //专家回拨用户等待界面
            that._hangup({
              hangupType: 'CANCEl',
              stayInpage: true,
              source: 'lifetimes.detached,status:1,4,5'
            })
            break;
          default:
            break;
        }
      }
    }
  },

  pageLifetimes: {
    show() {
      // 页面被展示
      pageIsShowing = true;
      wx.setKeepScreenOn({
        keepScreenOn: true
      })
      code1101 = 0;
      if (!onLoading) {
        if (getApp().globalData._hhim.loginStatus()) {
          that._sendLog('1', 'hh-call onShow');
          if (1 == that.data.status) {
            setTimeout(function() {
              ring.play();
            }, 500)
          } else {
            ring.stop();
          }
        } else {
          ring.stop();
          wx.navigateBack({
            delta: 1
          })
        }
      }
    },

    hide() {
      this._logInfo('>>>>>>>>>>page hide');
      // 页面被隐藏
      pageIsShowing = false;
      ring.stop();
      if (getApp().globalData._hhim.loginStatus()) {
        that._sendLog('1', 'hh-call onHide');
      }
    }
  },

  /**
   * 组件的方法列表
   */
  methods: {

    _requestComplete() {

      this._logInfo('初始化参数完成，准备启动CALL...');
      this._initHhImSdk(false, {
        onClose: that._onWsClose
      }, function(res) {
        onLoading = false;
        that._triggerEvent('login', {
          login: 200 == res.status
        });
        if (200 == res.status) {
          disConnected = false;
          that._applyStyle();
          that._logInfo('loginStatus:' + getApp().globalData._hhim.loginStatus());

          that._addMonitorLog();
          if (that.data._request.status) {
            that.setData({
              status: that.data._request.status,
              expertCalling: true
            })
            if (4 == that.data._request.status) {
              //专家侧呼叫
              that.setData({
                showLaunchBtn: false
              })
              that._doCall(that._preCallCb, that.data._request.famOrderId);
            }
            if (5 == that.data._request.status) {
              //用户侧等待呼叫（医生或专家）
              that._queryCallInfo();
            }
          } else {
            that._prepareCall();
          }
        } else {
          wx.showModal({
            title: '提示',
            content: '登录参数错误',
            showCancel: false,
            success: function() {
              wx.navigateBack({
                delta: 1
              })
            }
          })
        }
      });
    },

    _addMonitorLog() {
      wx.getSystemInfo({
        success: function(res) {
          that._resetTop(res);
          that._sendLog('1', JSON.stringify(res));
        }
      })
      wx.getNetworkType({
        success(res) {
          that._sendLog('1', 'networkType:' + res.networkType);
        }
      })
      wx.onNetworkStatusChange(function(res) {
        if (!res.isConnected) {
          if (getApp().globalData._hhim) {
            getApp().globalData._hhim.logout();
            getApp().globalData._hhim = null;
          }
          disConnected = true;
          that._onWsClose();
        } else {
          disConnected = false;
          that._sendLog('1', 'networkStatusChange:' + JSON.stringify(res));
        }
      })
      wx.onMemoryWarning(function() {
        that._sendLog('1', 'onMemoryWarning');
      })
    },

    _resetTop(res) {

      if (res && res.screenHeight && res.windowHeight &&
        res.screenHeight == res.windowHeight) {
        this._logInfo('重新调整高度');
        var rect = wx.getMenuButtonBoundingClientRect();
        that.setData({
          pusherTop: 5 + rect.bottom,
          expertTop: 30 + rect.bottom
        })
      }
    },

    /**
     * 播放监控
     */
    _playerMonitor() {
      setTimeout(function() {
        if (!playStart) {
          that.data.player.play();
          that._playerMonitor();
        }
      }, 2000)
    },

    /**
     * 推流监控
     */
    _pusherMonitor() {
      setTimeout(function() {
        if (!pushStart) {
          that.data.pusher.start();
          that._pusherMonitor();
        }
      }, 3000)
    },

    /**
     * 显示推流画面
     */
    _showPusher() {
      that.setData({
        pusherVisible: ''
      })
    },

    /**
     * 隐藏推流画面
     */
    _hidePusher() {
      that.setData({
        pusherVisible: 'hidden'
      })
    },

    /**
     * 显示播放画面
     */
    _showPlayer() {
      that.setData({
        playerVisible: ''
      })
    },

    /**
     * 隐藏播放画面
     */
    _hidePlayer() {
      that.setData({
        playerVisible: 'hidden'
      })
    },

    /** 启动推流和播放 */
    _startVideo() {
      ring.stop();
      if (!that.data.pushUrl || !that.data.playUrl) {
        return;
      }

      that.setData({
        pusherHeight: 167,
        pusherWidth: 120
      })

      that._showPusher();
      that._showPlayer();
      playStart = false;
      that.data.player.play();
      that._playerMonitor();
      if (that.data.playerFullscreen) {
        that.data.player.requestFullScreen();
      }
      that._startVideoTimer();
    },

    /** 停止推流和播放 */
    _stopVideo() {
      ring.stop();
      if (that.data.pusher) {
        that.data.pusher.stop();
      }
      if (that.data.player) {
        that.data.player.stop();
        that.data.player.exitFullScreen();
      }
      that._hidePusher();
      that._hidePlayer();
      that.setData({
        videoTimeStart: null,
        showExtControls: true,
        demoVideoVisible: 'hidden'
      })
      that._tapFolding();
    },

    /** 点击显示隐藏扩展控制按纽 */
    _tapFolding() {
      if (that.data.showExtControls) {
        that.setData({
          showExtControls: false,
          extControlHeight: 35,
          extControlImgSrc: 'https://imgs.hh-medic.com/icon/wmp/up.png'
        })
      } else {
        that.setData({
          showExtControls: true,
          extControlHeight: 185,
          extControlImgSrc: 'https://imgs.hh-medic.com/icon/wmp/down.png'
        })
      }
    },

    _statechangePlayer(e) {
      if (0 == that.data.status) {
        return;
      }
      if (2004 == e.detail.code) {
        playStart = true;
        callStatus.playVideo = true;
      }
      if (e.detail.code < 0) {
        //出错之后尝试重启播放
        that.data.player.stop();
        playStart = false;
        that.data.player.play();
        that._playerMonitor();
      }
      that._sendLog('3', 'status:' + e.detail.code);
      that._triggerEvent('playerstatechange', e);
    },

    _netChangedPlayer(e) {
      if (0 == that.data.status) {
        return;
      }
      var nInfo = {
        vbr: e.detail.info.videoBitrate,
        abr: e.detail.info.audioBitrate,
        fps: parseInt(e.detail.info.videoFPS),
        spd: e.detail.info.netSpeed,
        jit: e.detail.info.netJitter,
        vw: e.detail.info.videoWidth,
        vh: e.detail.info.videoHeight
      }
      that._sendLog('3', 'netinfo:' + JSON.stringify(nInfo));
    },

    _errorPlayer(e) {
      that._sendLog('3', 'error:' + e.detail.errCode);
    },


    _onLivePusherError: function(e) {
      that._sendLog('2', 'error:' + e.detail.errCode);
      if (10001 == e.detail.errCode || 10002 == e.detail.errCode) {
        //启动摄像头或麦克风失败
        that._hangup({
          initiative: true,
          hangupType: 'HANGUP',
          stayInpage: false,
          source: '_onLivePusherError'
        })
      }
    },

    _onLivePusherNetInfo(e) {
      if (0 == that.data.status) {
        return;
      }
      var nInfo = {
        vbr: e.detail.info.videoBitrate,
        abr: e.detail.info.audioBitrate,
        fps: parseInt(e.detail.info.videoFPS),
        spd: e.detail.info.netSpeed,
        jit: e.detail.info.netJitter,
        vw: e.detail.info.videoWidth,
        vh: e.detail.info.videoHeight
      }
      that._sendLog('2', 'netinfo:' + JSON.stringify(nInfo));
    },

    _onLivePusherChange: function(e) {
      that._processPusherCode(e.detail.code);
      if (0 < that.data.status) {
        that._sendLog('2', 'status:' + e.detail.code);
        that._triggerEvent('pusherstatechange', e);
      }
    },

    /** 处理推流状态码 */
    _processPusherCode(code) {
      code = parseInt(code);
      if (1002 == code) {
        pushStart = true;
        return;
      }
      if (1003 == code) {
        //打开摄像头成功
        callStatus.openCamera = true;
        return;
      }

      if (-1308 == code) {
        code1308++;
      }
      if (3 == code1308) {
        code1308++;
        wx.showToast({
          title: '网络错误请重拨',
          icon: 'none',
          duration: 2000
        })
        setTimeout(function() {
          that._hangup({
            initiative: true,
            hangupType: 'HANGUP',
            stayInpage: false,
            source: '_processPusherCode'
          })
        }, 2000)
        return;
      }

      if (1101 == code) {
        code1101++;
      }
      if (3 == code1101) {
        code1101++;
        wx.showToast({
          title: '网络卡顿...',
          icon: 'loading',
          duration: 2000
        })
      }
    },

    /** 封装wx.showLoading */
    _showLoading(obj) {
      if (pageIsShowing) {
        wx.showLoading({
          title: obj.title,
        })
        setTimeout(function() {
          wx.hideLoading();
        }, 30 * 1000);
      }
    },

    /** 检查用户授权 */
    _checkAuthorize: function(callback) {
      wx.authorize({
        scope: "scope.record",
        success: function() {
          wx.authorize({
            scope: "scope.camera",
            success: function() {
              if (callback) {
                callback(true);
              }
            },
            fail: function() {
              that._sendLog('1', 'authorize failed:camera');
              if (callback) {
                callback(false);
              }
            }
          })
        },
        fail: function() {
          that._sendLog('1', 'authorize failed:record');
          if (callback) {
            callback(false);
          }
        }
      })
    },

    _prepareCall() {
      if (200000 == that.data._request.dept) {
        //医生回拨
        that._logInfo('医生回拨...');
        that._queryCallInfo();
      } else {
        //正常呼叫
        that._doCall(that._preCallCb, that.data._request.dept);
      }
    },

    _doCall(callback, dept) {
      that._sendLog('1', 'authorize check start');
      //检查用户麦克风和摄像头是否已授权
      that._checkAuthorize(function(success) {
        if (!success) {
          //麦克风或摄像头未授权 
          that.setData({
            showSettingBtn: true
          })
          return;
        }
        that._sendLog('1', 'authorize successs ');
        callStatus.preCallStart = new Date().getTime();
        getApp().globalData._hhim.preCall(dept, callback,
          that.data._request.to,
          that.data._request.appointedDoctorId,
          that.data._request.appointedOrderId,
          that.data._request.medicRecordId,
          that.data._request.patient,
          that.data._request.hospitalId);
      })
    },

    _preCallCb(data) {
      callStatus.preCallFinish = new Date().getTime();
      //判断当前页面是否已卸载
      if (!pageIsShowing) {
        that._hangup({
          initiative: true,
          hangupType: 'CANCEL',
          stayInpage: true,
          source: '_preCallCb'
        })
        return;
      }

      var eventDetail = Object.assign({}, data);
      eventDetail.livePlayUrl = '';
      eventDetail.livePushUrl = '';
      that._triggerEvent('precallstatechange', eventDetail);

      that._sendLog('1', 'push:' + (data.livePushUrl ? data.livePushUrl : ''));
      that._sendLog('1', 'play:' + (data.livePlayUrl ? data.livePlayUrl : ''));
      if (!data.success) {
        that.setData({
          status: 0,
          pushUrl: '',
          playUrl: ''
        })
        var msg = data.message ? data.message : '医生繁忙，请稍后再拨';
        wx.hideLoading();
        wx.showModal({
          title: '错误',
          content: msg,
          showCancel: false,
          success: function() {
            wx.navigateBack({
              delta: 1
            })
          }
        })
        return;
      }
      callStatus.openCamera = false;
      that._showPusher();

      //图片
      var photoUrl = 'https://imgs.hh-medic.com/photo/D2017081615094714624/98A8RC.jpg?x-oss-process=image/resize,m_fixed,w_750';
      if (data.doctor.photourl) {
        photoUrl = data.doctor.photourl;
      }

      var license = '';
      if (data.doctor.license) {
        if (data.doctor.license.indexOf('?x-oss-process') < 0) {
          license = data.doctor.license + '?x-oss-process=image/resize,m_fixed,w_400';
        } else {
          license = data.doctor.license;
        }
      }

      if (photoUrl.startsWith('http://')) {
        photoUrl = photoUrl.replace('http://', 'https://');
      }

      if (license.startsWith('http://')) {
        license = license.replace('http://', 'https://');
      }

      if (data.orderId) {
        famOrderId = data.orderId;
      }
      //显示详情
      that.setData({
        countdown: that.data.t301Timeout,
        photoUrl: photoUrl,
        license: license,
        name: data.doctor.name,
        pushUrl: data.livePushUrl,
        pusherHeight: 140,
        pusherWidth: 100,
        showCancelBtn: true,
        showCalledPanel: false
      })
      livePlayUrl = data.livePlayUrl;

      that._countDown();
      getApp().globalData._hhim.call(that._callCb, false);
      getApp().globalData._hhim.on('transfer', that._transfer);
      getApp().globalData._hhim.on('error', that._hhImError);

      pushStart = false;
      that.data.pusher.start();

      ring.play();
      ring.onTimeUpdate(function() {
        ring.offTimeUpdate();
        pushStart = false;
        that.data.pusher.start();
        that._pusherMonitor();
      });

      setTimeout(function() {
        if (0 == that.data.status) {
          that.setData({
            status: 1
          })
        }
      }, 1000)
      that._checkCameraIsOpen();
    },

    _callCb(data) {
      ring.stop();
      that.data.pusher.stopBGM();
      if (that.data.t301) {
        clearInterval(that.data.t301);
        that.setData({
          t301: null
        })
      }
      if (1 == data.data) {
        wx.setNavigationBarTitle({
          title: '通话中'
        })
        that.setData({
          playUrl: livePlayUrl,
          status: 2
        })
        wx.vibrateLong();
        //接听，开始推流。重要！！！必须加延时，否则可能导致无规律的拉流失败
        setTimeout(function() {
          that._startVideo();
        }, 500)
        that._checkVideoIsPlay();

      } else {
        //拒绝或错误
        that._hangup({
          initiative: false,
          source: '_callCb'
        })
      }
    },

    /** 检查推流摄像头是否已打开 */
    _checkCameraIsOpen() {
      setTimeout(function() {
        if (callStatus.openCamera || !pageIsShowing) {
          //摄像头已打开
          return;
        }
        if (1 != that.data.status && 2 != that.data.status) {
          //不是处于呼叫等待或视频中
          return;
        }
        if (!pageIsShowing) {
          //当前页面没有显示
          return;
        }
        that._sendLog('1', 'can not open camera');
        that._hangup({
          initiative: true,
          hangupType: 'HANGUP',
          stayInpage: false,
          source: '_checkCameraIsOpen'
        })
        wx.showModal({
          title: '错误',
          content: that.data._request.cameraTimeoutMessage,
          showCancel: false,
          success: function() {
            wx.navigateBack({
              delta: 1
            })
          }
        })

      }, parseInt(this.data._request.cameraTimeoutSeconds) * 1000);
    },

    /** 检查是否正常播放视频 */
    _checkVideoIsPlay() {
      setTimeout(function() {
        if (callStatus.playVideo || !pageIsShowing) {
          //摄像头已打开
          return;
        }
        if (2 != that.data.status) {
          //不是处于视频中
          return;
        }
        if (!pageIsShowing) {
          //当前页面没有显示
          return;
        }
        that._sendLog('1', 'can not play video');
        that._hangup({
          initiative: true,
          hangupType: 'HANGUP',
          stayInpage: false,
          source: '_checkVideoIsPlay'
        })
        wx.showModal({
          title: '错误',
          content: that.data._request.playTimeoutMessage,
          showCancel: false,
          success: function() {
            wx.navigateBack({
              delta: 1
            })
          }
        })

      }, parseInt(this.data._request.playTimeoutSeconds) * 1000);
    },
    /**
     * 显示图片
     */
    _tapShowLicense() {
      if (!that.data.license) {
        return;
      }
      that._sendLog('1', 'tapShowLicense');
      wx.previewImage({
        urls: [that.data.license]
      })
    },

    _tapShowUploaded() {
      if (0 == that.data.uploadedImages.length) {
        return;
      }
      that._sendLog('1', 'tapShowUploaded');
      wx.previewImage({
        urls: that.data.uploadedImages,
        current: that.data.uploadedImages[that.data.uploadedImages.length - 1]
      })
    },

    /**
     * 开关闪光灯
     */
    _tapToggleFlash() {
      that._sendLog('1', 'tapToggleFlash');
      if (!that.data.isBackCamera) {
        //如果不是后置摄像头
        wx.showToast({
          title: '请切换至后摄像头',
          icon: 'none',
          duration: 2000
        })
        return;
      }

      if (that.data.pusher) {
        that.data.pusher.toggleTorch({
          success: function() {
            that.setData({
              flashIcon: that._toggleFlashIcon()
            })
          }
        });
      }
    },
    /**
     * 开关闪光灯后获取相应的icon
     */
    _toggleFlashIcon() {
      if ('https://imgs.hh-medic.com/icon/wmp/flash-off.png' == that.data.flashIcon) {
        return 'https://imgs.hh-medic.com/icon/wmp/flash-on.png';
      }
      return 'https://imgs.hh-medic.com/icon/wmp/flash-off.png';
    },

    /**
     * 切换前后摄像头
     */
    _switchCamera() {
      if (that.data.pusher) {
        that._sendLog('1', 'switchCamera');
        that.data.pusher.switchCamera({
          success: function() {
            that.setData({
              isBackCamera: !that.data.isBackCamera
            })
          }
        });
      }
    },

    /**
     * 选择图片资料，从相册还是拍照
     */
    _selectImage() {
      that._sendLog('1', 'selectImage start');
      getApp().globalData._hhim.switchMode('AUDIO');
      that.data.pusher.pause();
      wx.chooseImage({
        count: 1,
        sizeType: ['original'],
        sourceType: ['album', 'camera'],
        success: function(res) {
          // 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片
          var tempFilePaths = res.tempFilePaths
          getApp().globalData._hhim.uploadFile(tempFilePaths[0], function(e) {
            console.log(e);
            e = JSON.parse(e);
            if (200 == e.status) {
              //成功
              var fileUrl = e.data;
              getApp().globalData._hhim.addAttatch(fileUrl, function(e) {
                console.log(e);
              })
              var uploaded = that.data.uploadedImages;
              uploaded.push(fileUrl);
              that.setData({
                uploadedImages: uploaded
              })
            } else {
              wx.showToast({
                title: '发送失败！',
              })
            }
          });
        },
        complete: function() {
          that._sendLog('1', 'selectImage complete');
          getApp().globalData._hhim.switchMode('VIDEO');
          that.data.pusher.resume();
          that._resumeVideo();
        }
      })
    },

    _cancelInitiative(e) {
      ring.stop();
      wx.vibrateLong();
      that._sendLog('1', 'cancelInitiative type:' + e.target.dataset.hanguptype);
      that._hangup({
        initiative: true,
        hangupType: e.target.dataset.hanguptype,
        stayInpage: false,
        source: '_cancelInitiative'
      })
    },

    _hangup(options) {
      var _options = {
        initiative: true,
        hangupType: 'HANGUP',
        stayInpage: false
      }
      if (options) {
        _options = Object.assign(_options, options);
      }
      if (_options.source) {
        that._logInfo('hangup source:' + _options.source);
      }

      if (!getApp().globalData._hhim || !getApp().globalData._hhim.loginStatus() || 'hhImError' == _options.source) {
        if (!_options.stayInpage) {
          wx.navigateBack({
            delta: 1
          })
        }
        return;
      }
      that._showLoading({
        title: '正在结束...',
      })

      var videoTimeSeconds = this.data.videoTimeStart ? parseInt((new Date().getTime() - that.data.videoTimeStart) / 1000) : 0;
      //清除计时器
      that._clearCountDown();
      that._stopVideo();
      getApp().globalData._hhim.on('transfer', null);
      getApp().globalData._hhim.on('error', null);

      that.setData({
        countdown: that.data.t301Timeout,
        status: 0,
        pushUrl: '',
        playUrl: ''
      })

      that._triggerEvent('hangup', {
        initiative: _options.initiative,
        hangupType: _options.hangupType,
        videoDur: videoTimeSeconds
      });

      //if (_options.initiative) {
      that._logInfo('>>>挂机中，通话时长:' + videoTimeSeconds);
      getApp().globalData._hhim.hangup(function(success, data) {
        if (that.data._request.famOrderId) {
          wx.hideLoading();
          wx.setNavigationBarTitle({
            title: '视频已结束'
          })
          that.setData({
            showLaunchBtn: true
          })
        } else {
          that._feedback(_options.stayInpage, data);
        }
      }, false, _options.hangupType, videoTimeSeconds);
      // } else {
      //   if (that.data._request.famOrderId) {
      //     wx.hideLoading();
      //     wx.setNavigationBarTitle({
      //       title: '视频已结束'
      //     })
      //     that.setData({
      //       showLaunchBtn: true
      //     })
      //   } else {
      //     that._feedback(_options.stayInpage);
      //   }
      // }
    },

    /** 评价 */
    _feedback(stayInpage, data) {
      console.log('_feedback');
      wx.hideLoading();
      if (data && data.question) {
        wx.setNavigationBarTitle({
          title: '评价'
        })
        this.setData({
          question: data.question,
          feedbackVisible: ''
        })
      } else {
        //是否留在当前页面
        if (!stayInpage) {
          console.log('navigateBack...');
          wx.navigateBack({
            delta: 1
          })
        }
      }
    },

    /** 评价窗口关闭事件 */
    _evaClose() {
      this.setData({
        feedbackVisible: 'hidden'
      })
      wx.navigateBack({
        delta: 1
      })
    },
    /** 用户回答调研问题事件 */
    _evaAsk(e) {
      getApp().globalData._hhim.feedback(famOrderId, that.data.question.id, e.detail.answerText);
    },

    /** 用户打分评价事件 */
    _evaluate(e) {
      getApp().globalData._hhim.evaluate(famOrderId, e.detail.evaValue, e.detail.evaText);
    },

    /** 倒计时 */
    _countDown() {
      if (that.data.t301) {
        clearInterval(that.data.t301);
      }

      that.setData({
        t301: null,
        timeout: that.data.t301Timeout
      })

      secondes = that.data.t301Timeout;
      var t = setInterval(function() {
        if (2 == that.data.status) {
          //视频进行中
          that._clearCountDown();
          return;
        }
        secondes--;
        that.setData({
          timeout: secondes
        })
        if (secondes < 0) {
          that._clearCountDown();
          that._hangup({
            initiative: true,
            hangupType: 'TIMEOUT',
            stayInpage: false,
            source: '_countDown'
          })
        }
      }, 1000);
      that.setData({
        t301: t
      })
    },

    /** 开始计时器 */
    _startVideoTimer() {
      that.setData({
        videoTimeStart: new Date().getTime()
      })
      var interval = setInterval(function() {
        if (!that.data.videoTimeStart) {
          clearInterval(interval);
          return;
        }
        var vt = parseInt((new Date().getTime() - that.data.videoTimeStart) / 1000);
        that.setData({
          videoTime: dateUtil.formatTimeLength(vt)
        })

      }, 1000)
    },

    /**清除倒计时 */
    _clearCountDown() {
      if (!that.data.t301) {
        return;
      }
      secondes = that.data.t301Timeout;
      ring.stop();
      clearInterval(that.data.t301);
      that.setData({
        t301: null,
        countdown: that.data.t301Timeout
      })
    },

    _transfer(res) {
      that._sendLog('1', 'transfe play:' + res.data.livePlayUrl);
      that.setData({
        countdown: that.data.t301Timeout,
        photoUrl: res.data.photoUrl,
        license: res.data.license,
        name: res.data.name,
        pusherHeight: 140,
        pusherWidth: 100,
        showCancelBtn: true,
        showCalledPanel: false
      })
      livePlayUrl = res.data.livePlayUrl;

      that._stopVideo();
      that.setData({
        status: 1
      })

      that._showPusher();
      that._countDown();
      getApp().globalData._hhim.call(that._callCb, false);
      ring.play();
      ring.onPlay(function() {
        ring.offPlay();
        pushStart = false;
        that.data.pusher.start();
        that._pusherMonitor();
      });
    },

    _resumeVideo() {
      playStart = false;
      pushStart = false;
      that.data.player.play();
      that.data.pusher.start();
      that._playerMonitor();
      that._pusherMonitor();
    },

    _queryCallInfo() {
      getApp().globalData._hhim.on('transfer', that._transfer);
      getApp().globalData._hhim.on('callinfo', that._parseCallInfo);
      getApp().globalData._hhim.on('hangup', that._calledHangup);
      callStatus.preCallStart = new Date().getTime();
      getApp().globalData._hhim.callInfo();
    },

    _calledHangup() {
      that._hangup({
        initiative: false,
        hangupType: 'HANGUP',
        stayInpage: false,
        source: '_calledHangup'
      })
    },

    _parseCallInfo(res) {
      if ('undefined' == typeof(res) || !res) {
        getApp().globalData._hhim.on('callinfo', null);
        getApp().globalData._hhim.on('hangup', null);
        wx.navigateBack({
          delta: 1
        })
        return;
      }
      callStatus.preCallFinish = new Date().getTime();
      wx.hideLoading();
      if (res.doctor.name) {
        that.setData({
          name: res.doctor.name
        })
      }
      if (res.doctor.photourl) {
        that.setData({
          photoUrl: res.doctor.photourl + '?x-oss-process=image/resize,m_fixed,w_750'
        })
      }
      if (res.doctor.license) {
        that.setData({
          license: res.doctor.license + '?x-oss-process=image/resize,m_fixed,w_400'
        })
      }

      if (res.livePushUrl) {
        that.setData({
          pushUrl: res.livePushUrl
        })
      }
      if (res.livePlayUrl) {
        livePlayUrl = res.livePlayUrl
      }
      if (res.orderId) {
        famOrderId = res.orderId
      }
      wx.setNavigationBarTitle({
        title: '正在呼叫'
      })

      var pusher = wx.createLivePusherContext(this);
      that.setData({
        status: 1,
        pusher: pusher,
        showCancelBtn: false,
        showCalledPanel: true,
        showAcceptBtn: true
      })
      that._showPusher();

      ring.play();
      ring.onPlay(function() {
        ring.offPlay();
        pushStart = false;
        that.data.pusher.start();
        that._pusherMonitor();
      });

      wx.hideLoading();
    },

    /** 接听或拒绝 */
    _answerCall(e) {
      ring.stop();
      wx.vibrateLong();
      getApp().globalData._hhim.callResponse(famOrderId, e.currentTarget.dataset.answer);
      if (1 == parseInt(e.currentTarget.dataset.answer)) {
        //接听
        that.setData({
          playUrl: livePlayUrl,
          status: 2
        })
        wx.setNavigationBarTitle({
          title: '通话中'
        })
        setTimeout(function() {
          that._startVideo();
        }, 500)
      } else {
        //取消
        getApp().globalData._hhim.on('callinfo', null);
        getApp().globalData._hhim.on('hangup', null);
        wx.navigateBack({
          delta: 1
        })
      }
    },

    /** 接听 */
    _acceptCall(e) {
      getApp().globalData._hhim.callResponse(famOrderId, 1);
      this.setData({
        playUrl: livePlayUrl
      })
      wx.vibrateLong();
      wx.setNavigationBarTitle({
        title: '通话中'
      })
      this._startVideo();
    },

    _hhImError: function(e) {
      that._clearCountDown();
      that._hangup({
        initiative: false,
        hangupType: 'HANGUP',
        stayInpage: false,
        source: 'hhImError'
      })
    },

    _navBack: function() {
      wx.navigateBack({
        delta: 1
      })
    },
    _applyStyle() {
      if (!this.data._request.style) {
        return;
      }
      var style = this.data._request.style;
      var bg = '#ffffff',
        fg = '#000000';


      if (style.navigationBar && style.navigationBar.bColor) {
        bg = style.navigationBar.bColor;
      }
      if (style.navigationBar && style.navigationBar.fColor) {
        fg = style.navigationBar.fColor;
      }
      wx.setNavigationBarColor({
        frontColor: fg,
        backgroundColor: bg
      })

      var request = this.data._request;
      var uiStyle = this.data.uiStyle;

      if (style.logoImage) {
        request.logoImage = style.logoImage
      }
      if (style.objFit) {
        uiStyle.objFit = style.objFit;
      }
      if (style.muted) {
        uiStyle.muted = style.muted;
      }
      if (style.waittingText) {
        uiStyle.waittingText = style.waittingText;
      }
      if (style.extBtns) {
        uiStyle.extBtns = style.extBtns;
      }
      if (style.license) {
        uiStyle.license = style.license;
      }
      this.setData({
        _request: request,
        uiStyle: uiStyle
      })
    },

    _onWsClose() {
      that._logInfo('与服务器连接断开，即将返回...');
      if (showModal) return;
      showModal = true;
      wx.showModal({
        title: '网络不给力',
        content: '建议切换网络或稍后呼叫医生',
        showCancel: false,
        success: function() {
          showModal = false;
          wx.navigateBack({
            delta: 1
          })
        }
      })
    },
    //弱网监控
    _weakNetworkMonitor() {
      callStatus.preCallStart = -1;
      callStatus.preCallFinish = -1;
      if (timeOutHandler.weaknetwork) {
        clearTimeout(timeOutHandler.weaknetwork);
      }
      timeOutHandler.weaknetwork = setTimeout(function() {
        if (!pageIsShowing) {
          return;
        }
        that._logInfo('>>>>>>weaknetwork:' + callStatus.preCallStart + ',' + callStatus.preCallFinish);
        if (callStatus.preCallStart < 0 || callStatus.preCallFinish < 0) {
          if (getApp().globalData._hhim) {
            that._logInfo('weaknetwork,hhim logout');
            getApp().globalData._hhim.logout();
          } else {
            that._logInfo('weaknetwork,_onWsClose');
            that._onWsClose();
          }
        }
      }, that.data._request.weakNetworkTimeout * 1000);
    },

    _showAddress() {
      var _req = this.data._request;
      _req.enableDelete = false;
      this.setData({
        _request: _req,
        addressStatus: 1
      })
    },
    _hideAddress() {
      this.setData({
        addressStatus: 0
      })
    },
    _confirmAddress() {
      if (!this.data._request || !this.data._request.userToken || !this.data.address) {
        return;
      }
      var url = this._getHost().wmpHost +
        'address/setSelect?userToken=' + this.data._request.userToken + '&id=' + this.data.address.id;
      wx.request({
        url: url,
        data: {},
        method: 'POST',
        success: function(res) {
          if (res && res.data && 200 == res.data.status) {
            //成功
            that._hideAddress();
          } else {
            wx.showModal({
              title: '错误',
              content: '选择配送地址出错，请稍后再试',
              showCancel: false
            })
          }
        }
      })
    },
    _editAddress(e) {
      console.log('_editAddress:' + e.detail.addressId);
      var _req = this.data._request;
      _req.editType = 'update';
      _req.addressId = e.detail.addressId;
      this._hidePlayer();
      this._hidePusher();
      this.setData({
        _request: _req,
        showAddressEdit: true
      })
    },
    _chooseAddress(e) {
      this.setData({
        address: e.detail.address,
        addressStatus: 2
      })
    },
    _addAddress() {
      var _req = this.data._request;
      _req.editType = 'create';
      this._hidePlayer();
      this._hidePusher();
      this.setData({
        chooseAddress: {},
        _request: _req,
        showAddressEdit: true
      })
    },

    _editNaviBack() {
      if (this.data.editStatus > 1) {
        this._changeEditStatus(this.data.editStatus - 1);
      } else {
        var hhAdd = this.selectComponent('#hhAddress');
        if (hhAdd) {
          hhAdd.refresh();
        }

        this._showPlayer();
        this._showPusher();
        this.setData({
          showAddressEdit: false
        })
      }
    },
    _changeEditStatus(s) {
      var _s = this.data.editStatus;
      this.setData({
        editStatus: s
      })
      var visible = true;
      if (s < _s) {
        visible = false;
        s = _s;
      }
      var layer = '';
      switch (s) {
        case 2:
          layer = 'searchaddress';
          break;
        case 3:
          layer = 'citylist';
          break;
        default:
          return;
      }
      this._setLayerVisible(layer, visible);
    },

    _setLayerVisible(layer, visible) {
      var left = visible ? 0 : this.data.sysInfo.windowWidth;
      var animation = wx.createAnimation({
        duration: 250,
        timingFunction: 'ease-in-out',
      })
      animation.left(left).step();
      switch (layer) {
        case 'searchaddress':
          this.setData({
            animationSearch: animation.export(),
          })
          break;
        case 'citylist':
          this.setData({
            animationCity: animation.export(),
          })
          break;
        default:
          break;
      }
    },
    _selectCity() {
      this._changeEditStatus(3);
    },

    _locateCity(e) {
      this.setData({
        locCity: e.detail.city
      })
    },
    _changeCity(e) {
      this.setData({
        curCity: e.detail.name
      })
      this._editNaviBack();
    },

    _changeAddress(e) {
      this.setData({
        chooseAddress: e.detail
      })
      this._editNaviBack();
    },
    _selectAddress() {
      this._changeEditStatus(2);
    },

    _saveAddress(e) {
      if (e.detail.success) {
        wx.showToast({
          title: '保存成功',
          mask: true
        })
        setTimeout(function() {
          that._editNaviBack();
        }, 1500)
      } else {
        wx.showModal({
          title: '错误',
          content: '保存失败，请稍后再试',
          showCancel: false
        })
      }
    }
  }
})