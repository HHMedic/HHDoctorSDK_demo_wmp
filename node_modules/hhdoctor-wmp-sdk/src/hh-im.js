//const hhim = require('./utils/HH_WMP_SDK.js');
const common = require('./utils/commonUtil.js');
const hhBehaviors = require('./hhBehaviors.js');
const innerAudioContext = wx.createInnerAudioContext()
const bgm = wx.getBackgroundAudioManager();
const rm = wx.getRecorderManager();

var that;
var hhim;
var recordStardPosition = null;
var reloadMsg = false;
var safeArea = 0;
var pageIsShowing = false;
var voicePlaying = false;

Component({
  behaviors: [hhBehaviors],
  /**
   * 组件的属性列表
   */
  properties: {},

  lifetimes: {
    attached() {
      that = this;
      var rect = wx.getMenuButtonBoundingClientRect();
      
      // this.setData({
      //   wxMbb: rect
      // })
      wx.getSystemInfo({
        success(res) {
          that._getSafeAreaHeight(res);
          that.setData({
            sysInfo: res,
            wxMbb: rect
            //msgPanelTop: (that.data._request.callPage ? 102 : 38) + rect.top,
            //msgPanelHeight: res.windowHeight - (that.data._request.callPage ? 152 : 88) - safeArea - rect.top
          })
        }
      })
      rm.onStop(that._onRecordStop);
      pageIsShowing = true;
    },
    ready() {},
    detached() {
      pageIsShowing = false;
    }
  },

  pageLifetimes: {
    show() {
      pageIsShowing = true;
      if (!hhim) {
        return;
      }
      hhim.on('close', that._onWsClose);
      if (!hhim.loginStatus()) {
        getApp().globalData._hhim = null;
        that._viewIm();
      }
    },
    hide() {
      pageIsShowing = false;
      hhim.on('close', null);
    }
  },

  /**
   * 组件的初始数据
   */
  data: {
    _name: 'hh-im',
    url: '',
    host: {},
    sysInfo: null, //小程序系统信息
    msgPanelTop: 120, //中部消息列表顶部
    msgPanelHeight: 100, //中部消息列表高度
    bottomHeight: 50, //底部输入和工具栏高度
    msgList: [], //消息列表数组
    lastMsgId: '', //最新消息id
    inputText: '', //用户输入的文字
    inputTypeClass: 'audio', //输入区域类型
    inputTextVisible: true, //文本输入是否可见
    recordMaskVisible: 'hidden', //录音遮罩层是否可见
    recordBtnTip: '按住 说话', //录音按纽的提示文字
    recordCancel: false, //是否取消录音
    animationData: null, //顶部按纽栏动画对象
    utilsAnimation: null, //工具栏动画对象
    disconnAnimation: null,
    wxMbb: null, //右上角胶囊信息
    uiStyle: null,
    safeAreaHight: 34,
    customStyle: null,
    cardOptions: {
      medTitle: '用药说明',
      summaryTitle: '家庭医生视频咨询总结'
    },
    disConnected: false,
    personalIconLight: ''
  },

  /**
   * 组件的方法列表
   */
  methods: {

    _requestComplete() {
      this._logInfo('初始化参数完成，准备启动IM...');
      this.setData({
        msgPanelTop: (this.data._request.callPage ? 102 : 38) + this.data.wxMbb.top,
        msgPanelHeight: this.data.sysInfo.windowHeight - (this.data._request.callPage ? 152 : 88) - safeArea - this.data.wxMbb.top
      })

      that._addMonitor();
      that._applyStyle();
      that._viewIm();
    },

    _viewIm() {
      this._initHhImSdk(true, {
        onHistory: that._receiveHis,
        onMsg: that._receiveMsg,
        onCall: that._onCall,
        onClose: that._onWsClose
      }, function(res) {
        if (200 == res.status) {
          that.setData({
            disConnected: false
          })
          that._triggerEvent('login', {
            login: true
          });
          hhim = getApp().globalData._hhim;
        } else {
          that._triggerEvent('login', {
            login: false
          });
        }
      });
    },

    _onWsClose() {
      that._logInfo('与服务器连接断开，正在尝试重连...');
      setTimeout(function() {
        if (hhim && hhim.loginStatus()) {
          return;
        }
        hhim = null;
        getApp().globalData._hhim = null;
        that._viewIm();
      }, 2000)
    },

    _addMonitor() {
      wx.onNetworkStatusChange(function(res) {
        if (!res.isConnected) {
          that.setData({
            disConnected: true
          })
          if (getApp().globalData._hhim) {
            getApp().globalData._hhim.logout();
            getApp().globalData._hhim = null;
          }
        } else if (that.data.disConnected) {
          setTimeout(function() {
            getApp().globalData._hhim = null;
            that._viewIm();
          }, 500)
        }
      })

      bgm.onEnded(that._onStopAudio);
    },

    /** 收到历史消息 */
    _receiveHis(msgList) {
      that._addToMsgList(msgList, reloadMsg);
    },

    /** 收到即时消息 */
    _receiveMsg(msg) {
      that._addToMsgList([msg]);
    },

    _onCall(res) {
      that._logInfo('用户被叫...');
      var pageUrl = '';
      switch (res.data.doctorType) {
        case 'famDoctor': //家庭医生呼叫
          if (!that.data._request.callPage) {
            return;
          }
          pageUrl = that.data._request.callPage + '?' + that._getPublicRequestParams() + '&callimmediate=true&dept=200000';
          break;
        case 'expert': //专家呼叫
        default:
          //pageUrl = '../../packageDemo/pages/expertpush/expertpush?status=2';
          pageUrl = that.data._request.callPage + '?' + that._getPublicRequestParams() + '&status=5';
          break;
      }

      wx.navigateTo({
        url: pageUrl
      })
    },

    /** 将收到的消息加入数组 */
    _addToMsgList(msgList, reload) {
      if (!msgList || 0 == msgList.length) {
        return;
      }
      var msgId = '';
      var lastMsgTime = '';
      var list = this.data.msgList;
      if (reload) {
        if (list.length > 0) {
          lastMsgTime = list[0].time;
        }
        list = [];
      }
      for (var i = 0; i < msgList.length; i++) {

        //将unix时间戳格式化成文本
        /*var f = common.formatDate('MM月dd日 hh:mm', parseInt(msgList[i].time));
        msgList[i].timeText = f;
        if (msgList[i].dur) {
          //格式化音频类消息的时长字段
          var dur = msgList[i].dur / 1000;
          dur = dur.toFixed(1);
          msgList[i].durText = dur;
        }*/
        var msg = this._precessMsg(msgList[i]);
        list.push(msg);
        if (!reload) {
          msgId = 'msg' + msgList[i].time;
        } else if (i > 0 && lastMsgTime == msgList[i].time) {
          msgId = 'msg' + msgList[i - 1].time;
        }
      }
      this.setData({
        msgList: list,
        lastMsgId: msgId
      })

    },
    _precessMsg(msg) {
      //将unix时间戳格式化成文本
      var f = common.formatDate('MM月dd日 hh:mm', parseInt(msg.time));
      msg.timeText = f;
      if (msg.dur) {
        //格式化音频类消息的时长字段
        var dur = msg.dur / 1000;
        dur = dur.toFixed(1);
        msg.durText = dur;
      }

      if ('card' == msg.type &&
        'buyDrugInformation' == msg.bodyContent.command) {
        //获取药卡的最新状态
        var drugOrderId = msg.bodyContent.drugOrderId;
        if (drugOrderId) {
          var payStatus = wx.getStorageSync('drugOrderPay_' + drugOrderId);
          if (payStatus && 1 == payStatus) {
            msg.bodyContent.buttonName = '查看订单';
          } else {
            this._updateDrugOrderStatus(drugOrderId);
          }
        }
      }
      return msg;
    },

    _updateDrugOrderStatus(orderId) {
      var url = this._getHost().wmpHost +
        'im/getDrugOrderInfo?orderId=' + orderId +
        '&userToken=' + this.data._request.userToken;
      wx.request({
        url: url,
        data: {},
        method: 'POST',
        success: function(res) {
          if (res && res.data && 200 == res.data.status) {
            //成功
            if (1 == res.data.data.famOrderDrug.isPay) {
              //已付款
              that._updateDrugOrderCommandText(orderId);
            }
          }
        }
      })
    },
    _updateDrugOrderCommandText(orderId) {
      wx.setStorage({
        key: 'drugOrderPay_' + orderId,
        data: 1
      })
      var list = this.data.msgList;
      for (var i = 0; i < list.length; i++) {
        if (list[i].bodyContent && orderId == list[i].bodyContent.drugOrderId) {
          list[i].bodyContent.buttonName = '查看订单';
          this.setData({
            msgList: list
          })
          return;
        }

      }
    },
    /** 显示或隐藏呼叫医生弹出层 */
    _showHideBtn() {
      this._showBtn(!this.data.callBtnsVisible);
    },

    /** 隐藏呼叫医生弹出层 */
    _hideBtn() {
      this._showBtn(false);
      this._showUtils(false);
    },

    /** 动画修改呼叫医生弹出层的高度 */
    _showBtn(visible) {
      if (visible == this.data.callBtnsVisible) {
        return;
      }
      var animation = wx.createAnimation({
        duration: 250,
        timingFunction: 'ease-in-out',
      })

      var topPx = visible ? 105 + that.data.sysInfo.statusBarHeight : 35;
      animation.top(topPx).step();
      this.setData({
        callBtnsVisible: visible,
        animationData: animation.export(),
      })
      if (1 == this.data.demo) {
        setTimeout(function() {
          that.setData({
            showDemoTip: !visible
          })
        }, visible ? 0 : 250)
      }
    },

    /** 显示或隐藏底部的工具栏 */
    _showHideUtils() {
      if (this.data.bottomHeight < 100) {
        this._showUtils(true);
      } else {
        this._showUtils(false);
      }
    },

    /** 修改底栏高度 */
    _showUtils(visible) {
      this.setData({
        bottomHeight: visible ? 260 : 50,
        safeAreaHight: visible ? 0 : safeArea
      })
    },

    /** 点击呼叫医生 */
    _callDoctor(e) {
      this._hideBtn();
      if (!this.data._request.callPage) {
        return;
      }
      if (that.data.disConnected || !hhim || !hhim.loginStatus()) {
        wx.showModal({
          title: '网络不给力',
          content: '建议切换网络或稍后呼叫医生',
          showCancel: false,
          success: function() {
            wx.navigateBack({
              delta: 1
            })
          }
        })
        return;
      }
      //var pageUrl = this.data._request.callPage + '?' + this._getPublicRequestParams() + '&dept=' + e.currentTarget.dataset.dept;
      var pageUrl = this.data._request.callPage + '?' + this._getPublicRequestParams() ;
      console.log(pageUrl);
      wx.navigateTo({
        url: pageUrl
      })
    },

    /** 切换显示语音输入和文字输入 */
    _changeInputType() {
      this._showUtils(false);
      var isAudio = 'audio' == this.data.inputTypeClass;
      this.setData({
        inputTypeClass: isAudio ? 'keyboard' : 'audio',
        inputTextVisible: !isAudio
      })
    },

    /** 输入文本消息 */
    _inputText(e) {
      this.setData({
        inputText: e.detail.value
      })
    },

    /** 发送文本消息 */
    _sendTextMsg(e) {
      if (this.data.inputText) {
        hhim.sendText(this.data.inputText, this._sendCallback);
      }
      this.setData({
        inputText: ''
      })
    },

    /** 开始录音 */
    _startRecord(e) {
      this.setData({
        recordBtnTip: '松开 结束',
        recordMaskVisible: '',
        recordCancel: false
      })
      recordStardPosition = e.touches[0].clientY;
      rm.start({
        format: 'aac'
      });
    },

    /** 停止录音 */
    _stopRecord(e) {
      this.setData({
        recordBtnTip: '按住 说话',
        recordMaskVisible: 'hidden'
      })

      recordStardPosition = null;
      rm.stop();
    },

    /** 取消录音 */
    _cancelRecord(e) {
      if (recordStardPosition) {
        var deltarY = Math.abs(e.touches[0].clientY - recordStardPosition);
        if (deltarY > 50) {
          this.setData({
            recordCancel: true
          })
        } else {
          this.setData({
            recordCancel: false
          })
        }
      }
    },

    /** 录音结束后调用上传 */
    _onRecordStop(res) {
      if (that.data.recordCancel) {
        return;
      }
      wx.showLoading({
        title: '发送中...',
      })
      hhim.sendAudio(res.tempFilePath, res.duration, this._sendCallback);
      setTimeout(function() {
        wx.hideLoading();
      }, 5000);
    },

    /** 预览图片 */
    _previewImg(e) {
      wx.previewImage({
        current: e.currentTarget.dataset.url,
        urls: [e.currentTarget.dataset.url],
      })
    },

    /**播放语音 */
    _playAudio(e) {
      console.log('voicePlaying:' + voicePlaying);
      if (voicePlaying) {
        wx.hideLoading();
        bgm.stop();
        voicePlaying = false;
        return;
      }
      var url = e.currentTarget.dataset.url;
      bgm.title = 'bgm' + new Date().getTime();
      bgm.src = url;
      voicePlaying = true;
      wx.showToast({
        title: '播放中...',
        icon: 'loading',
        duration: parseInt(e.currentTarget.dataset.dur)
      })
    },

    _onStopAudio() {
      wx.hideLoading();
      voicePlaying = false;
    },

    /** 选择图片或拍照 */
    _selectImage(e) {
      this._showUtils(false);
      var imgCount = 'camera' == e.currentTarget.dataset.type ? 1 : 9;
      wx.chooseImage({
        count: imgCount,
        sizeType: ['original'],
        sourceType: [e.currentTarget.dataset.type],
        success: function(res) {
          wx.showLoading({
            title: '发送中...'
          })
          hhim.sendImages(res.tempFilePaths, that._sendCallback);
          setTimeout(function() {
            wx.hideLoading();
          }, imgCount * 2000);
        },
      })
    },

    /** 发送消息回调 */
    _sendCallback(res) {
      if (res.allDone) {
        wx.hideLoading();
      }
    },

    /** 点击查看视频咨询总结卡片 */
    _viewSummary(e) {
      this._viewEhr({
        viewModule: 'detail',
        patient: e.currentTarget.dataset.patient,
        medicRecordId: e.currentTarget.dataset.mrid
      });
    },

    _applyStyle() {
      if (!this.data._request.style) {
        return;
      }
      var style = this.data._request.style;
      var bg = '#ffffff',
        fg = '#000000',
        title = '视频医生';

      if (style.navBarBg) {
        bg = style.navBarBg;
      }
      if (style.navBarFg) {
        fg = style.navBarFg;
      }

      wx.setNavigationBarColor({
        frontColor: fg,
        backgroundColor: bg
      })
      if (style.personalIconClass) {
        this.setData({
          personalIconLight: style.personalIconClass
        })
      } else {
        this._setPersonalIcon(bg);
      }


      if (style.pageTitle) {
        title = style.pageTitle;
      }
      wx.setNavigationBarTitle({
        title: title
      })

      this.setData({
        uiStyle: {
          navBarBg: bg,
          navBarFg: fg,
          pageTitle: title
        }
      })

      if (style.customStyle && style.customStyle.length > 0) {
        var cStyle = {};
        for (var i = 0; i < style.customStyle.length; i++) {
          var ss = that._getCustomStyle(style.customStyle[i].style);
          switch (style.customStyle[i].item) {
            case '.main-btn':
              cStyle.mainBtn = ss;
              break;
            case '.pop-btn':
              cStyle.popBtn = ss;
              break;
            case '.pop-btn-text':
              cStyle.popBtnText = ss;
              break;
            default:
              break;
          }
        }
        that.setData({
          customStyle: cStyle
        })
      }

      if (style.card) {
        var card = that.data.cardOptions;
        if (style.card.medTitle) {
          card.medTitle = style.card.medTitle
        }
        if (style.card.summaryTitle) {
          card.summaryTitle = style.card.summaryTitle
        }
        that.setData({
          cardOptions: card
        })
      }
      if (style.asst) {

      }
    },

    _setPersonalIcon(bg) {
      if (bg.indexOf('#') < 0) return;
      if (7 != bg.length) return;

      var r = parseInt(bg.substring(1, 3), 16);
      var g = parseInt(bg.substring(3, 5), 16);
      var b = parseInt(bg.substring(5, 7), 16);
      if ((r + g + b) / 3 < 128) {
        this.setData({
          personalIconLight: 'light'
        })
      }
    },

    _getCustomStyle(style) {
      var str = '';
      for (var item in style) {
        str += item + ":" + style[item] + ";";
      }
      return str;
    },
    _loadMoreHisMsg() {
      if (!hhim) {
        return;
      }
      reloadMsg = true;
      hhim.getHisMsg(true);
    },

    _getSafeAreaHeight(info) {
      // if (info.safeArea) {
      //   safeArea = info.screenHeight - info.safeArea.bottom
      // } else {
      //   if (info.model.toLowerCase().indexOf('iphone x') >= 0) {
      //     safeArea = 34;
      //   }
      // }
      if (info.model.toLowerCase().indexOf('iphone x') >= 0) {
        safeArea = 34;
      } else {
        if (info.safeArea) {
          safeArea = info.screenHeight - info.safeArea.bottom
        }
      }
      this.setData({
        safeAreaHight: safeArea
      })
    },

    _viewPers() {
      //this._viewPersonal('personal');
      wx.navigateTo({
        url: this.data.basePath + 'innerpages/my?' + this._getPublicRequestParams() + '&addressPage=' + this.data._request.addressPage + '&payPage=' + this.data._request.payPage + '&autoAcl=true',
      })
    },
    _buyService(e) {
      this._logInfo('buyService...');

      /*if (!this.data._request.personalPage) {
        return;
      }
      var page = this.data._request.personalPage + '?' + this._getPublicRequestParams() + '&personalModule=payselect';
      console.log(page);
      wx.navigateTo({
        url: page
      })*/
      this._viewPersonal('payselect');
    },
    _buyProduct() {
      var pageUrl = this.data.basePath + 'innerpages/buyProduct?' + this._getPublicRequestParams() + '&payPage=' + this.data._request.payPage;
      wx.navigateTo({
        url: pageUrl,
      })
    },

    _buyMedicine(e) {
      this._logInfo('buyMedicine...');
      if (!e.currentTarget.dataset.trans) {
        return;
      }
      this._viewMedicine(e.currentTarget.dataset.drugid);
    }
  }
})